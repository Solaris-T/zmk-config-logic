/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        combos {
           compatible = "zmk,combos";
           combo_capslock {
               timeout-ms = <50>;
               // keys = <ZMK_KEY_LCTRL ZMK_KEY_LALT ZMK_KEY_C>;
               // action = <ZMK_MOD_LCTL ZMK_MOD_LALT ZMK_MOD_C>;
               // key-positions = <1 2>; // Q and W cuz index 0 is empty
               key-positions = <2 9>; // W and O
               bindings = <&kp CAPSLOCK>;
           };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |     |  Q  |  W  |  E        |  R      |  T      |        |  Y      |  U         |  I  |  O  |  P  |      |
// |     |  A  |  S  |  D        |  F      |  G      |        |  H      |  J         |  K  |  L  |  ;  |      |
// |     |  Z  |  X  |  C        |  V      |  B      |        |  N      |  M         |  ,  |  .  |  /  |      |
//           --------| GUI       | LWR/TAB | SPC     |        | ENT     | RSE/BSPC   | ALT | --------
//                   | LCTRL/TAB | GUI     | LWR/SPC |        | RSE/ENT | RSHFT/BSPC | LALT/ESC |
//                                (command)                                         (option)
                        bindings = <
   &trans &kp Q &kp W &kp E &kp R &kp T           &kp Y &kp U  &kp I     &kp O   &kp P    &trans
   &trans &kp A &kp S &kp D &kp F &kp G           &kp H &kp J  &kp K     &kp L   &kp SEMI &trans
   &trans &kp Z &kp X &kp C &kp V &kp B           &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &trans
        //&kp LGUI &lt 1 TAB &kp SPACE      &kp RET &lt 2 BSPC &kp RALT //&capslock
      &mt LCTRL TAB &kp LGUI &lt 1 SPACE          &lt 2 RET  &mt RSHFT BSPC  &mt LEFT_ALT ESC
                        >;
                };

                lower_layer {
// -----------------------------------------------------------------------------------------
// |     |  1  |  2     |  3    |  4   |  5  |     |  6  |  7  |  8  |  9  |  0  |      |
// |     | BT1 | BT2    | BT3   | BT4  | BT5 |     | LFT | DWN |  UP | RGT |  :  |      |
// |     | ESC | BT_CLR | LCTRL | SHFT |     |     |     |     |     |     |  '  |      |
//                      | GUI   | SPC  | ENT |     | ALT |
                        bindings = <
   &trans &kp N1       &kp N2       &kp N3       &kp N4       &kp N5                &kp N6   &kp N7   &kp N8 &kp N9    &kp N0     &trans
   &trans &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4          &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp COLON     &trans
   &trans &kp ESC      &bt BT_CLR   &kp LCTRL    &kp LSHFT    &trans                &trans   &trans   &trans &trans    &kp SQT  &trans
                                    &kp LGUI     &trans       &kp SPACE             &kp RET  &trans   &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |     |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
// |     |  `  |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// |     |  ~  |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans &kp EXCL   &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &trans
   &trans &kp GRAVE  &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &trans
   &trans &kp TILDE  &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &trans
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
        };
};


